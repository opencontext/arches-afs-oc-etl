CREATE SCHEMA IF NOT EXISTS "staging";


create or replace function __arches_tile_view_update() returns trigger as $$
declare
    view_namespace text;
    group_id uuid;
    graph_id uuid;
    parent_id uuid;
    tile_id uuid;
    transaction_id uuid;
    json_data json;
    old_json_data jsonb;
    edit_type text;
begin
    select graphid into graph_id from nodes where nodeid = group_id;
    view_namespace = format('%s.%s', tg_table_schema, tg_table_name);
    select obj_description(view_namespace::regclass, 'pg_class') into group_id;
    if (TG_OP = 'DELETE') then
        select tiledata into old_json_data from tiles where tileid = old.tileid;
        delete from resource_x_resource where tileid = old.tileid;
        delete from public.tiles where tileid = old.tileid;
        insert into bulk_index_queue (resourceinstanceid, createddate)
            values (old.resourceinstanceid, current_timestamp) on conflict do nothing;
        insert into edit_log (
            resourceclassid,
            resourceinstanceid,
            nodegroupid,
            tileinstanceid,
            edittype,
            oldvalue,
            timestamp,
            note,
            transactionid
        ) values (
            graph_id,
            old.resourceinstanceid,
            group_id,
            old.tileid,
            'tile delete',
            old_json_data,
            now(),
            'loaded via SQL backend',
            public.uuid_generate_v1mc()
        );
        return old;
    else
        select __arches_get_json_data_for_view(new, tg_table_schema, tg_table_name) into json_data;
        select __arches_get_parent_id_for_view(new, tg_table_schema, tg_table_name) into parent_id;
        tile_id = new.tileid;
        if (new.transactionid is null) then
            transaction_id = public.uuid_generate_v1mc();
        else
            transaction_id = new.transactionid;
        end if;

        if (TG_OP = 'UPDATE') then
            select tiledata into old_json_data from tiles where tileid = tile_id;
            edit_type = 'tile edit';
            if (transaction_id = old.transactionid) then
                transaction_id = public.uuid_generate_v1mc();
            end if;
            update public.tiles
            set tiledata = json_data,
                nodegroupid = group_id,
                parenttileid = parent_id,
                resourceinstanceid = new.resourceinstanceid
            where tileid = new.tileid;
        elsif (TG_OP = 'INSERT') then
            old_json_data = null;
            edit_type = 'tile create';
            if tile_id is null then
                tile_id = public.uuid_generate_v1mc();
            end if;
            insert into public.tiles(
                tileid,
                tiledata,
                nodegroupid,
                parenttileid,
                resourceinstanceid
            ) values (
                tile_id,
                json_data,
                group_id,
                parent_id,
                new.resourceinstanceid
            );
        end if;
        perform __arches_refresh_tile_resource_relationships(tile_id);
        insert into bulk_index_queue (resourceinstanceid, createddate)
            values (new.resourceinstanceid, current_timestamp) on conflict do nothing;
        insert into edit_log (
            resourceclassid,
            resourceinstanceid,
            nodegroupid,
            tileinstanceid,
            edittype,
            newvalue,
            oldvalue,
            timestamp,
            note,
            transactionid
        ) values (
            graph_id,
            new.resourceinstanceid,
            group_id,
            tile_id,
            edit_type,
            json_data::jsonb,
            old_json_data,
            now(),
            'loaded via SQL backend',
            transaction_id
        );
        return new;
    end if;
    end;
$$ language plpgsql;



    SELECT __arches_create_resource_model_views('9519cb4f-b25b-11e9-8c7b-a4d18cec433a');
    


    SELECT __arches_create_resource_model_views('707cbd78-ca7a-11e9-990b-a4d18cec433a');
    


    SELECT __arches_create_resource_model_views('cc8ed633-b25b-11e9-a13a-a4d18cec433a');
    

/* ---------------------------------------------------------------------------------- */ 



                INSERT INTO physical_thing.instances (
                    resourceinstanceid, 
descriptors, 
name, 
graphid, 
graphpublicationid, 
principaluser_id
                ) SELECT
                    resourceinstanceid::uuid, 
staging.phys_name_ids.instance_descriptor::jsonb, 
staging.phys_name_ids.instance_name::jsonb, 
graphid::uuid, 
graphpublicationid::uuid, 
principaluser_id::integer
                
                FROM staging.phys_name_ids
                WHERE (staging.phys_name_ids.resourceinstanceid NOT IN (SELECT resourceinstanceid FROM physical_thing.instances)) AND 
((staging.phys_name_ids.resourceinstanceid::uuid IS NOT NULL))
                ORDER BY staging.phys_name_ids.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.name (
                    resourceinstanceid, 
tileid, 
name_content, 
name_type_, 
name_language_, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
item_label_tileid::uuid, 
item_label_name_content::jsonb, 
item_label_name_type_::uuid[], 
item_label_name_language_::uuid[], 
item_label_nodegroupid::uuid
                
                FROM staging.phys_name_ids
                WHERE (staging.phys_name_ids.item_label_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_name_ids.item_label_tileid::uuid IS NOT NULL) AND 
((staging.phys_name_ids.item_label_name_content::jsonb IS NOT NULL))
                ORDER BY staging.phys_name_ids.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.identifier (
                    resourceinstanceid, 
tileid, 
identifier_content, 
identifier_type, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
id_uri_tileid::uuid, 
id_uri_identifier_content::jsonb, 
id_uri_identifier_type::uuid[], 
id_uri_nodegroupid::uuid
                
                FROM staging.phys_name_ids
                WHERE (staging.phys_name_ids.id_uri_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_name_ids.id_uri_tileid::uuid IS NOT NULL) AND 
((staging.phys_name_ids.id_uri_identifier_content::jsonb IS NOT NULL))
                ORDER BY staging.phys_name_ids.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.identifier (
                    resourceinstanceid, 
tileid, 
identifier_content, 
identifier_type, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
id_ark_tileid::uuid, 
id_ark_identifier_content::jsonb, 
id_ark_identifier_type::uuid[], 
id_ark_nodegroupid::uuid
                
                FROM staging.phys_name_ids
                WHERE (staging.phys_name_ids.id_ark_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_name_ids.id_ark_tileid::uuid IS NOT NULL) AND 
((staging.phys_name_ids.id_ark_identifier_content::jsonb IS NOT NULL))
                ORDER BY staging.phys_name_ids.resourceinstanceid
                
                ;
                

/* ---------------------------------------------------------------------------------- */ 



                INSERT INTO digital_resources.instances (
                    resourceinstanceid, 
descriptors, 
name, 
graphid, 
graphpublicationid, 
principaluser_id
                ) SELECT
                    resourceinstanceid::uuid, 
staging.dig_res_name_ids_rels.instance_descriptor::jsonb, 
staging.dig_res_name_ids_rels.instance_name::jsonb, 
graphid::uuid, 
graphpublicationid::uuid, 
principaluser_id::integer
                
                FROM staging.dig_res_name_ids_rels
                WHERE (staging.dig_res_name_ids_rels.resourceinstanceid NOT IN (SELECT resourceinstanceid FROM digital_resources.instances)) AND 
((staging.dig_res_name_ids_rels.resourceinstanceid::uuid IS NOT NULL))
                ORDER BY staging.dig_res_name_ids_rels.resourceinstanceid
                
                ;
                


                INSERT INTO digital_resources.name (
                    resourceinstanceid, 
tileid, 
name_content, 
name_type, 
name_language, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
media_label_tileid::uuid, 
media_label_name_content::jsonb, 
media_label_name_type::uuid[], 
media_label_name_language::uuid[], 
media_label_nodegroupid::uuid
                
                FROM staging.dig_res_name_ids_rels
                WHERE (staging.dig_res_name_ids_rels.media_label_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.dig_res_name_ids_rels.media_label_tileid::uuid IS NOT NULL) AND 
((staging.dig_res_name_ids_rels.media_label_name_content::jsonb IS NOT NULL))
                ORDER BY staging.dig_res_name_ids_rels.resourceinstanceid
                
                ;
                


                INSERT INTO digital_resources.identifier (
                    resourceinstanceid, 
tileid, 
identifier_content, 
identifier_type, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
id_ark_tileid::uuid, 
id_ark_identifier_content::jsonb, 
id_ark_identifier_type::uuid[], 
id_ark_nodegroupid::uuid
                
                FROM staging.dig_res_name_ids_rels
                WHERE (staging.dig_res_name_ids_rels.id_ark_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.dig_res_name_ids_rels.id_ark_tileid::uuid IS NOT NULL) AND 
((staging.dig_res_name_ids_rels.id_ark_identifier_content::jsonb IS NOT NULL))
                ORDER BY staging.dig_res_name_ids_rels.resourceinstanceid
                
                ;
                


                INSERT INTO digital_resources.type (
                    resourceinstanceid, 
tileid, 
type, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
type_tileid::uuid, 
type_type::uuid[], 
type_nodegroupid::uuid
                
                FROM staging.dig_res_name_ids_rels
                WHERE (staging.dig_res_name_ids_rels.type_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.dig_res_name_ids_rels.type_tileid::uuid IS NOT NULL) AND 
((staging.dig_res_name_ids_rels.type_type::uuid[] IS NOT NULL))
                ORDER BY staging.dig_res_name_ids_rels.resourceinstanceid
                
                ;
                


                INSERT INTO digital_resources.file (
                    resourceinstanceid, 
tileid, 
file, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
file_tileid::uuid, 
file_file::jsonb, 
file_nodegroupid::uuid
                
                FROM staging.dig_res_name_ids_rels
                WHERE (staging.dig_res_name_ids_rels.file_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.dig_res_name_ids_rels.file_tileid::uuid IS NOT NULL) AND 
((staging.dig_res_name_ids_rels.file_file::jsonb IS NOT NULL))
                ORDER BY staging.dig_res_name_ids_rels.resourceinstanceid
                
                ;
                


                    INSERT INTO files (
                        fileid, 
                        path, 
                        tileid
                    ) SELECT
                        staging.dig_res_name_ids_rels.sql_file_id::uuid,
                        staging.dig_res_name_ids_rels.sql_file_path,
                        staging.dig_res_name_ids_rels.file_tileid::uuid
                    FROM staging.dig_res_name_ids_rels
                    WHERE staging.dig_res_name_ids_rels.file_tileid::uuid NOT IN (SELECT tileid FROM files);
                    

/* ---------------------------------------------------------------------------------- */ 



                INSERT INTO physical_thing.instances (
                    resourceinstanceid, 
graphid, 
graphpublicationid, 
principaluser_id
                ) SELECT
                    resourceinstanceid::uuid, 
graphid::uuid, 
graphpublicationid::uuid, 
principaluser_id::integer
                
                FROM staging.phys_rel_dig_res
                WHERE (staging.phys_rel_dig_res.resourceinstanceid NOT IN (SELECT resourceinstanceid FROM physical_thing.instances)) AND 
((staging.phys_rel_dig_res.resourceinstanceid::uuid IS NOT NULL))
                ORDER BY staging.phys_rel_dig_res.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.digital_reference (
                    resourceinstanceid, 
tileid, 
digital_reference_type, 
nodegroupid, 
digital_source
                ) SELECT
                    resourceinstanceid::uuid, 
type_tileid::uuid, 
type_digital_reference_type::uuid, 
type_nodegroupid::uuid, 

                        coalesce(
                            case jsonb_typeof(type_digital_source_related_objs) 
                                when 'array' then type_digital_source_related_objs 
                                else '[]'::jsonb end
                            ) as type_digital_source_related_objs_1
                        
                
                FROM staging.phys_rel_dig_res
                WHERE (staging.phys_rel_dig_res.type_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_rel_dig_res.type_tileid::uuid IS NOT NULL) AND 
((staging.phys_rel_dig_res.type_digital_reference_type::uuid IS NOT NULL) OR (staging.phys_rel_dig_res.type_digital_source_related_objs::jsonb IS NOT NULL))
                ORDER BY staging.phys_rel_dig_res.resourceinstanceid
                
                ;
                

/* ---------------------------------------------------------------------------------- */ 



                INSERT INTO physical_thing.instances (
                    resourceinstanceid, 
graphid, 
graphpublicationid, 
principaluser_id
                ) SELECT
                    resourceinstanceid::uuid, 
graphid::uuid, 
graphpublicationid::uuid, 
principaluser_id::integer
                
                FROM staging.phys_elements
                WHERE (staging.phys_elements.resourceinstanceid NOT IN (SELECT resourceinstanceid FROM physical_thing.instances)) AND 
((staging.phys_elements.resourceinstanceid::uuid IS NOT NULL))
                ORDER BY staging.phys_elements.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.material (
                    resourceinstanceid, 
tileid, 
material, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
tileid::uuid, 
material::uuid[], 
nodegroupid::uuid
                
                FROM staging.phys_elements
                WHERE (staging.phys_elements.tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_elements.tileid::uuid IS NOT NULL) AND 
((staging.phys_elements.material::uuid[] IS NOT NULL))
                ORDER BY staging.phys_elements.resourceinstanceid
                
                ;
                

/* ---------------------------------------------------------------------------------- */ 



                INSERT INTO physical_thing.instances (
                    resourceinstanceid, 
graphid, 
graphpublicationid, 
principaluser_id
                ) SELECT
                    resourceinstanceid::uuid, 
graphid::uuid, 
graphpublicationid::uuid, 
principaluser_id::integer
                
                FROM staging.phys_projs_sets_types
                WHERE (staging.phys_projs_sets_types.resourceinstanceid NOT IN (SELECT resourceinstanceid FROM physical_thing.instances)) AND 
((staging.phys_projs_sets_types.resourceinstanceid::uuid IS NOT NULL))
                ORDER BY staging.phys_projs_sets_types.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.type (
                    resourceinstanceid, 
tileid, 
type, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
tileid::uuid, 
type::uuid[], 
nodegroupid::uuid
                
                FROM staging.phys_projs_sets_types
                WHERE (staging.phys_projs_sets_types.tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_projs_sets_types.tileid::uuid IS NOT NULL) AND 
((staging.phys_projs_sets_types.type::uuid[] IS NOT NULL))
                ORDER BY staging.phys_projs_sets_types.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.member_of (
                    resourceinstanceid, 
tileid, 
nodegroupid, 
member_of
                ) SELECT
                    resourceinstanceid::uuid, 
member_tileid::uuid, 
member_nodegroupid::uuid, 

                        coalesce(
                            case jsonb_typeof(member_set_related_objs) 
                                when 'array' then member_set_related_objs 
                                else '[]'::jsonb end
                            ) as member_set_related_objs_1
                        
                
                FROM staging.phys_projs_sets_types
                WHERE (staging.phys_projs_sets_types.member_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_projs_sets_types.member_tileid::uuid IS NOT NULL) AND 
((staging.phys_projs_sets_types.member_nodegroupid::uuid IS NOT NULL) OR (staging.phys_projs_sets_types.member_set_related_objs::jsonb IS NOT NULL))
                ORDER BY staging.phys_projs_sets_types.resourceinstanceid
                
                ;
                

/* ---------------------------------------------------------------------------------- */ 



                INSERT INTO place.instances (
                    resourceinstanceid, 
graphid, 
graphpublicationid, 
principaluser_id
                ) SELECT
                    resourceinstanceid::uuid, 
graphid::uuid, 
graphpublicationid::uuid, 
principaluser_id::integer
                
                FROM staging.place
                WHERE (staging.place.resourceinstanceid NOT IN (SELECT resourceinstanceid FROM place.instances)) AND 
((staging.place.resourceinstanceid::uuid IS NOT NULL))
                ORDER BY staging.place.resourceinstanceid
                
                ;
                


                INSERT INTO place.name (
                    resourceinstanceid, 
tileid, 
content, 
type, 
language, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
place_name_tileid::uuid, 
place_name_content::jsonb, 
place_name_type::uuid[], 
place_name_language::uuid[], 
place_name_nodegroupid::uuid
                
                FROM staging.place
                WHERE (staging.place.place_name_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.place.place_name_tileid::uuid IS NOT NULL) AND 
((staging.place.place_name_content::jsonb IS NOT NULL))
                ORDER BY staging.place.resourceinstanceid
                
                ;
                


                INSERT INTO place.statement (
                    resourceinstanceid, 
tileid, 
content, 
type, 
language, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
statement_tileid::uuid, 
statement_content::jsonb, 
statement_type::uuid[], 
statement_language::uuid[], 
statement_nodegroupid::uuid
                
                FROM staging.place
                WHERE (staging.place.statement_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.place.statement_tileid::uuid IS NOT NULL) AND 
((staging.place.statement_content::jsonb IS NOT NULL))
                ORDER BY staging.place.resourceinstanceid
                
                ;
                


                INSERT INTO place.external_uri (
                    resourceinstanceid, 
tileid, 
external_uri, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
place_uri_tileid::uuid, 
place_uri_external_uri::jsonb, 
place_uri_nodegroupid::uuid
                
                FROM staging.place
                WHERE (staging.place.place_uri_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.place.place_uri_tileid::uuid IS NOT NULL) AND 
((staging.place.place_uri_external_uri::jsonb IS NOT NULL))
                ORDER BY staging.place.resourceinstanceid
                
                ;
                


                INSERT INTO place.defined_by (
                    resourceinstanceid, 
tileid, 
defined_by, 
nodegroupid
                ) SELECT
                    resourceinstanceid::uuid, 
geo_point_tileid::uuid, 
ST_AsText(ST_GeomFromGeoJSON(geo_point_defined_by)), 
geo_point_nodegroupid::uuid
                
                FROM staging.place
                WHERE (staging.place.geo_point_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.place.geo_point_tileid::uuid IS NOT NULL) AND 
((staging.place.geo_point_defined_by::jsonb IS NOT NULL))
                ORDER BY staging.place.resourceinstanceid
                
                ;
                

/* ---------------------------------------------------------------------------------- */ 



                INSERT INTO physical_thing.instances (
                    resourceinstanceid, 
graphid, 
graphpublicationid, 
principaluser_id
                ) SELECT
                    resourceinstanceid::uuid, 
graphid::uuid, 
graphpublicationid::uuid, 
principaluser_id::integer
                
                FROM staging.phys_rel_places
                WHERE (staging.phys_rel_places.resourceinstanceid NOT IN (SELECT resourceinstanceid FROM physical_thing.instances)) AND 
((staging.phys_rel_places.resourceinstanceid::uuid IS NOT NULL))
                ORDER BY staging.phys_rel_places.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.addition_to_collection (
                    resourceinstanceid, 
tileid, 
addition_to_collection_type, 
nodegroupid, 
addition_to_collection_added_to
                ) SELECT
                    resourceinstanceid::uuid, 
add_col_tileid::uuid, 
add_col_addition_to_collection_type::uuid[], 
add_col_nodegroupid::uuid, 

                        coalesce(
                            case jsonb_typeof(add_col_add_col_related_objs) 
                                when 'array' then add_col_add_col_related_objs 
                                else '[]'::jsonb end
                            ) as add_col_add_col_related_objs_1
                        
                
                FROM staging.phys_rel_places
                WHERE (staging.phys_rel_places.add_col_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_rel_places.add_col_tileid::uuid IS NOT NULL) AND 
((staging.phys_rel_places.add_col_addition_to_collection_type::uuid[] IS NOT NULL) OR (staging.phys_rel_places.add_col_add_col_related_objs::jsonb IS NOT NULL))
                ORDER BY staging.phys_rel_places.resourceinstanceid
                
                ;
                


                INSERT INTO physical_thing.addition_to_collection_statement (
                    resourceinstanceid, 
tileid, 
addition_to_collection_statement_content, 
addition_to_collection_statement_type, 
addition_to_collection_statement_language, 
nodegroupid, 
addition_to_collection
                ) SELECT
                    resourceinstanceid::uuid, 
add_stmt_tileid::uuid, 
add_stmt_addition_to_collection_statement_content::jsonb, 
add_stmt_addition_to_collection_statement_type::uuid[], 
add_stmt_addition_to_collection_statement_language::uuid[], 
add_stmt_nodegroupid::uuid, 
add_col_tileid::uuid
                
                FROM staging.phys_rel_places
                WHERE (staging.phys_rel_places.add_stmt_tileid::uuid NOT IN (SELECT tileid FROM tiles)) AND 
(staging.phys_rel_places.add_stmt_tileid::uuid IS NOT NULL) AND 
((staging.phys_rel_places.add_stmt_addition_to_collection_statement_content::jsonb IS NOT NULL))
                ORDER BY staging.phys_rel_places.resourceinstanceid
                
                ;
                


select * from refresh_geojson_geometries();
